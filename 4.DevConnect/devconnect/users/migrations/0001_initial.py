# Generated by Django 5.2.4 on 2025-08-24 17:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Bio')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('github_username', models.CharField(blank=True, max_length=39, verbose_name='GitHub Username')),
                ('linkedin_url', models.URLField(blank=True, verbose_name='LinkedIn URL')),
                ('portfolio_url', models.URLField(blank=True, verbose_name='Portfolio URL')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('is_available_for_hire', models.BooleanField(default=False, verbose_name='Available for Hire')),
                ('is_available_for_projects', models.BooleanField(default=False, verbose_name='Available for Projects')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email Verified')),
                ('email_verification_token', models.CharField(blank=True, max_length=100)),
                ('social_login_provider', models.CharField(blank=True, max_length=20)),
                ('social_login_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'indexes': [models.Index(fields=['username'], name='users_usernam_baeb4b_idx'), models.Index(fields=['email'], name='users_email_4b85f2_idx'), models.Index(fields=['github_username'], name='users_github__5cee41_idx'), models.Index(fields=['location'], name='users_locatio_bd9f26_idx'), models.Index(fields=['is_available_for_hire'], name='users_is_avai_3c89e3_idx'), models.Index(fields=['is_available_for_projects'], name='users_is_avai_f095bb_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
